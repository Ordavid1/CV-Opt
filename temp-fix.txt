// HTTPS/HTTP Server Setup
let server;
let protocolUsed = 'http';

try {
  if (process.env.NODE_ENV === 'production') {
    console.log('Starting in PRODUCTION mode with HTTP');
    server = http.createServer(app);
  } else {
    try {
      const __dirname = path.dirname(fileURLToPath(import.meta.url));
      const options = {
        key: fs.readFileSync(path.join(__dirname, 'certificates', 'localhost-key.pem')),
        cert: fs.readFileSync(path.join(__dirname, 'certificates', 'localhost.pem'))
      };
      console.log('Starting in DEVELOPMENT mode with HTTPS');
      server = https.createServer(options, app);
      protocolUsed = 'https';
    } catch (certError) {
      console.error('Failed to load SSL certificates:', certError.message);
      console.log('Falling back to HTTP for development');
      server = http.createServer(app);
      protocolUsed = 'http';
    }
  }

  server.listen(PORT, HOST, () => {
    console.log(`Server running at ${protocolUsed}://${HOST}:${PORT}`);
  });

  server.on('error', (error) => {
    console.error('Server error:', error.message);
    if (error.code === 'EADDRINUSE') {
      console.error(`Port ${PORT} is already in use. Choose a different port.`);
    }
    process.exit(1);
  });
} catch (startupError) {
  console.error('Fatal error during server startup:', startupError.message);
  process.exit(1);
}
