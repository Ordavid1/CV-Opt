<!--- CV-Opt index.html file --->
<!DOCTYPE html>
<html lang="en">
  <head>
  <!-- IMPORTANT: Load browser compatibility first -->
  <script nonce="<%= nonce %>" src="/error-suppressor.js"></script>
   
    <!-- Google Tag ANALYTICS (gtag.js) -->
    <script nonce="<%= nonce %>" async src="https://www.googletagmanager.com/gtag/js?id=G-LHH4T6MP6G"></script>
    <script nonce="<%= nonce %>">
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-LHH4T6MP6G');
    </script>
    <!-- End of Google tag (gtag.js) -->

    <!-- Google Tag Manager -->
    <script>
    (function(
      w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});
    var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';
    j.async=true;
    j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })
    (window,document,'script','dataLayer','GTM-PKNFMFZ3');
    </script>
    <!-- End Google Tag Manager -->

    <!-- Google tag ADS (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=AW-17081393104"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'AW-17081393104');
    </script>

    <!-- Event snippet for CV Purchase conversion page -->
    <script>
      gtag('event', 'conversion', {
          'send_to': 'AW-17081393104/USeJCKbLl8gaENC_hdE_',
          'transaction_id': ''
      });
    </script>

    <!-- 
      End Google Tag Manager 
      -->

    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>AI CV Optimizer | ATS‑Friendly Resume Tailoring Tool in 60s</title>
    
    <!-- Meta Tags -->
    <meta name="description" content="Get ATS‑friendly, job‑specific resumes in 60s with our AI CV Optimizer. Try your first resume tailor for free! Land more interviews with our AI-powered CV optimizer that tailors your resume to specific jobs, instantly for just $1. Try now!" />
    <meta name="keywords" content="CV optimizer, resume optimization, ATS-friendly resume, AI resume writer, job application helper, CV tailoring tool" />
    <meta name="robots" content="index, follow" />
    <meta name="author" content="AI CV Optimizer" />
    
    <!-- Twitter Card Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="AI CV Optimizer - Smart Resume Tailoring Tool" />
    <meta name="twitter:description" content="Transform your CV into an ATS-friendly resume tailored for your dream job using AI. Get instant optimization with our smart CV refinement tool." />
    <meta name="twitter:image" content="https://cvresumeoptimizer.com/og-image.jpg" />
    
    <!-- Enhanced Open Graph Tags -->
    <meta property="og:title" content="AI CV Optimizer - Smart Resume Tailoring Tool" />
    <meta property="og:description" content="Transform your CV into an ATS-friendly resume tailored for your dream job using AI. Get instant optimization with our smart CV refinement tool." />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://cvresumeoptimizer.com" />
    <meta property="og:image" content="https://cvresumeoptimizer.com/og-image.jpg" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content="AI CV Optimizer" />
    <meta property="og:locale" content="en_US" />
    <!-- Fallback image for social sharing -->
    <meta property="og:image:alt" content="AI CV Optimizer application interface" />

    <!-- Additional Icons -->
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />

    <!-- Canonical URL -->
    <link rel="canonical" href="https://cvresumeoptimizer.com/" />
    <!-- <link rel="alternate" hreflang="en" href="https://cvresumeoptimizer.com/" /> -->
    
    <!-- Font imports -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Stylesheets -->
    <link rel="stylesheet" href="/safari-fixes.css">
    <link rel="stylesheet" href="/styles.css" />

    <!-- Structured Data for rich snippets -->
<script type="application/ld+json">
[
  {
    "@context": "https://schema.org",
    "@type": "Organization",
    "name": "AI CV Optimizer",
    "url": "https://cvresumeoptimizer.com",
    "logo": "https://cvresumeoptimizer.com/og-image.jpg",
    "sameAs": [
      "https://twitter.com",
    ]
  },
  {
    "@context": "https://schema.org",
    "@type": "SoftwareApplication",
    "name": "AI CV Optimizer",
    "description": "An AI-powered tool that analyzes job descriptions and tailors your CV to be ATS-friendly and highlight the most relevant skills and experience.",
    "applicationCategory": "BusinessApplication",
    "operatingSystem": "Web browser (Platform Independent)",
    "offers": {
      "@type": "Offer",
      "price": "1.00",
      "priceCurrency": "USD",
      "description": "One-time fee for a single CV optimization."
    },
    "screenshot": "https://cvresumeoptimizer.com/og-image.jpg",
    "featureList": [
      "CV optimization based on job descriptions",
      "ATS-friendly resume personalization",
      "Job-specific keyword tailoring",
      "Adjustable refinement strength",
      "Instant results with highlighted changes"
    ],
    "author": {
      "@type": "Organization",
      "name": "AI CV Optimizer"
    },
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://cvresumeoptimizer.com"
    }
  },
  {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    "mainEntity": [{
      "@type": "Question",
      "name": "How does the AI CV Optimizer work?",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Our tool analyzes the job description from a URL you provide, extracts key skills and keywords, and then refines your uploaded CV to match those requirements, making it ideal for passing through Applicant Tracking Systems (ATS)."
      }
    }, {
      "@type": "Question",
      "name": "How long does the optimization take?",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Most CV optimizations are completed within 60 to 90 seconds after you complete the purchase."
      }
    }, {
      "@type": "Question",
      "name": "Is my first CV optimization free?",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Yes, we often provide the first optimization for free so you can see the power of our tool. The interface will indicate if a free pass is available to you."
      }
    }]
  },
  {
    "@context": "https://schema.org",
    "@type": "HowTo",
    "name": "How to Optimize Your CV in 3 Simple Steps",
    "step": [
      {
        "@type": "HowToStep",
        "name": "Enter Job URL",
        "text": "Paste the URL of the job description you are applying for and select your desired refinement strength.",
        "url": "https://cvresumeoptimizer.com/#jobUrlInput"
      },
      {
        "@type": "HowToStep",
        "name": "Provide Your CV",
        "text": "Paste your current CV directly into the input field.",
        "url": "https://cvresumeoptimizer.com/#cvInputFrame"
      },
      {
        "@type": "HowToStep",
        "name": "Optimize and Download",
        "text": "Click the 'Optimize My CV' button. After a brief processing time, you will receive your tailored, ATS-friendly CV, ready to copy or download.",
        "url": "https://cvresumeoptimizer.com/#cvOutputFrame"
      }
    ]
  }
]
</script>
      
  </head>
  <body>
    <!-- Google Tag Manager (noscript) -->
    <noscript>
      <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-PKNFMFZ3"
        height="0" width="0" style="display:none;visibility:hidden">
      </iframe>
    </noscript>
    <!-- End Google Tag Manager (noscript) -->

    <!-- About Button -->
    <div id="about-button">About</div>

    <!-- Add notification div here -->
    <div id="notification" class="notification" style="display: none;"></div>
    
    <!-- HERO SECTION -->
    <section class="hero">
      <div class="hero-content">
        <h1>Land Your <span class="gradient-text">Dream Job</span> with an AI-Optimized Resume</h1>
        <p><br>
          Our tool analyzes job descriptions and instantly tailors your CV to highlight relevant 
          skills and experience. ATS-friendly, personalized, and only $1 per optimization!
        </p> <br>
        <div class="social-proof">
          <div class="avatars">
            <div class="avatar">JD</div>
            <div class="avatar">TK</div>
            <div class="avatar">RH</div>
          </div>
          <p><strong>500+</strong> CVs optimized this week</p>
        </div>
      </div>
      <div class="hero-image">
        <img src="/images/resume-illustration.svg" alt="Illustration of an AI CV Optimization Agent Refining a Resume" loading="lazy"/>
      </div>
    </section>

    <main class="container">
      <!-- FEATURES SECTION -->
      <section class="features-section">
        <div class="section-header">
          <h3>How Our AI CV Optimizer Helps You</h3>
        </div>
        
        <div class="features-container">
          <div class="feature-card">
            <div class="feature-icon" style="background-color: rgba(59, 130, 246, 0.1); color: #3b82f6;">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="24" height="24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
            </div>
            <h4>Keyword Optimization</h4>
            <p>Our AI analyzes job descriptions to identify and incorporate key terms that will help your resume pass through Applicant Tracking Systems.</p>
          </div>
          
          <div class="feature-card">
            <div class="feature-icon" style="background-color: rgba(139, 92, 246, 0.1); color: #8b5cf6;">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="24" height="24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4" />
              </svg>
            </div>
            <h4>Customizable Refinement</h4>
            <p>Control how much your CV changes with our refinement strength slider, from subtle tweaks to comprehensive rewrites.</p>
          </div>
          
          <div class="feature-card">
            <div class="feature-icon" style="background-color: rgba(16, 185, 129, 0.1); color: #10b981;">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" width="24" height="24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            <h4>Instant Results</h4>
            <p>See the optimized version of your CV within minutes, with highlighted changes so you know exactly what was modified.</p>
          </div>
        </div>
      </section>

      <!-- INPUT SECTION -->
      <div class="input-section">
        <div class="section-header">
          <h3>Optimize Your CV in 3 Simple Steps</h3>
        </div>
        
        <!-- <div class="optimization-steps">
          <div class="step-card active">
            <div class="step-number">1</div>
            <h4>Enter Job URL</h4>
            <p>Paste the URL of the job you're applying for</p>
          </div>
          <div class="step-card">
            <div class="step-number">2</div>
            <h4>Upload Your CV</h4>
            <p>Paste or upload your current resume</p>
          </div>
          <div class="step-card">
            <div class="step-number">3</div>
            <h4>Get Optimized CV</h4>
            <p>Receive your tailored, ATS-friendly CV</p>
          </div>
        </div> -->

        <div class="job-input-container">
          <div class="job-url-group">
            <label for="jobUrlInput">Job Description URL 
              <span class="info-tooltip-icon">ⓘ
                <span class="info-tooltip-content">
                  <span class="tooltip-step"><span class="tooltip-step-number">1</span>Enter Job URL</span>
                  <p>Paste the URL of the job you're applying for</p>
                </span>
              </span>
            </label>
            <div class="input-with-icon">
              <i class="link-icon"></i>
              <input
                id="jobUrlInput"
                type="url"
                placeholder="https://www.linkedin.com/jobs/view/123456789"
                required
              />
            </div>
          </div>
          <div class="slider-group">
            <label for="refineStrength">Refinement Strength</label>
            <div class="slider-container">
              <input id="refineStrength" type="range" min="1" max="10" value="5" class="modern-slider" />
              <div class="slider-labels">
                <span>Subtle</span>
                <span id="refineStrengthVal">5</span>
                <span>Strong</span>
              </div>
            </div>
          </div>
        </div>

        <div class="frames-container">
          <div class="frame-wrapper">
            <div class="frame-header">
              <h4>Your Original CV 
                <span class="info-tooltip-icon">ⓘ
                  <span class="info-tooltip-content">
                    <span class="tooltip-step"><span class="tooltip-step-number">2</span>Upload Your CV</span>
                    <p>Paste or upload your current resume</p>
                  </span>
                </span>
              </h4>
              <div class="frame-actions">
                <button class="action-button" id="paste-cv-btn">Paste</button>
              </div>
            </div>
            <iframe id="cvInputFrame" class="modern-frame"></iframe>
          </div>
          
          <div class="frame-wrapper">
            <div class="frame-header">
              <h4>Optimized CV Preview 
                <span class="info-tooltip-icon">ⓘ
                  <span class="info-tooltip-content">
                    <span class="tooltip-step"><span class="tooltip-step-number">3</span>Get Optimized CV</span>
                    <p>Receive your tailored, ATS-friendly CV</p>
                  </span>
                </span>
              </h4>
              <div class="frame-actions">
                <button class="action-button" id="copy-cv-btn">Copy</button>
                <button class="action-button" id="download-cv-btn">Download docx</button>
                <button class="action-button" id="open-tab-cv-btn">Open in New Tab</button>
              </div>
            </div>
            <iframe id="cvOutputFrame" class="modern-frame"></iframe>
          </div>
        </div>
      </div>
      
      <!-- PAYMENT SECTION -->
      <div class="payment-section">
        <div class="price-tag">
          <div class="price">$1</div>
          <div class="price-period">per CV</div>
        </div>
        
        <!-- Add this for free pass status -->
        <div id="free-pass-status" class="free-pass-status">
          <div class="free-pass-badge">
            <span class="free-pass-icon">🎁</span>
            <span class="free-pass-text">First optimization free!</span>
          </div>
        </div>
        
        <button 
          id="checkout-button"
          class="payment-button"
        >
          <span class="button-icon">✨</span>
          Optimize My CV
        </button>
        
        <p id="result-message" class="transaction-message"></p>

        
        <div class="payment-benefits">
          <div class="benefit-item">
            <div class="benefit-icon">✓</div>
            <div class="benefit-text">ATS-Friendly Format</div>
          </div>
          <div class="benefit-item">
            <div class="benefit-icon">✓</div>
            <div class="benefit-text">Tailored Keywords</div>
          </div>
          <div class="benefit-item">
            <div class="benefit-icon">✓</div>
            <div class="benefit-text">Instant Delivery</div>
          </div>
        </div>
      </div>

      <!-- Add this near the payment section -->
      <button id="check-results-button" style="display: none;">
        Check Results
      </button>

      <!-- CHANGES SECTION -->
      <section class="changes-section">
        <div class="section-header">
          <h3>Changes Made to Your CV</h3>
        </div>
        
        <div class="changes-container">
          <!-- Remove the class from the changes div since we're styling the container -->
          <div id="changes"></div>
          
          <div class="changes-legend">
            <div class="legend-item">
              <span class="legend-color diff-added"></span>
              <span class="legend-text">Added content</span>
            </div>
            <div class="legend-item">
              <span class="legend-color diff-removed"></span>
              <span class="legend-text">Removed content</span>
            </div>
          </div>
        </div>
      </section>
    </main>

    <!-- STATUS INDICATOR -->
    <div id="status"></div>
    
    <!-- SPINNER -->
    <div id="spinner" class="modern-spinner">
      <svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg">
        <circle cx="20" cy="20" r="18" fill="none" stroke-width="4" stroke="#f0f0f0" />
        <circle cx="20" cy="20" r="18" fill="none" stroke-width="4" stroke="#6366f1" stroke-dasharray="113" stroke-dashoffset="0">
          <animateTransform attributeName="transform" type="rotate" from="0 20 20" to="360 20 20" dur="1s" repeatCount="indefinite" />
        </circle>
      </svg>
    </div>

    <!-- CHECKOUT MODAL -->
    <div id="checkout-modal" class="checkout-overlay">
      <div class="checkout-container">
        <div class="checkout-header">
          <h3>Complete Your Purchase</h3>
          <button id="close-checkout" class="checkout-close">×</button>
        </div>
        <div class="checkout-body">
          <iframe id="checkout-iframe" class="checkout-iframe" src="about:blank"></iframe>
        </div>
      </div>
    </div>

    <!-- ABOUT PANEL -->
    <div id="about-overlay">
      <div id="about-panel">
        <div class="about-header">
          <button id="close-about">&times;</button>
        </div>
        <div class="about-content">
          <div class="about-video-container">
            <video autoplay muted loop playsinline class="about-video">
              <source src="/cvopt-demo.mp4" type="video/mp4">
            </video>
          </div>

          <p style="font-size:12px; font-family:'Courier New', Courier, monospace;"><span>Last update: May,6, 2025. Using newest OpenAI o4-mini Model</span>
          <h1><span>Land Your Dream Job with an AI-Optimized Resume</span></h1>
          <p><span>Unlock your career potential with our cutting-edge </span><b><strong>resume optimization</strong></b><span> service. Our </span><b><strong>AI CV optimizer</strong></b><span> crafts </span><b><strong>ATS-friendly resumes</strong></b><span> by analyzing job descriptions to effectively match and showcase your skills and experience. For just $1, elevate your job application with precision and personalization.</span></p>
          <h2><span>Why Choose Our </span><span>Job Application Tools</span><span>?</span></h2>
          <ul>
            <li><b><strong>Resume Tailoring</strong></b><b><strong>:</strong></b><span> We customize your resume to align with specific job descriptions, ensuring your qualifications shine through.</span></li>
            <li><b><strong>ATS-Friendly Resumes</strong></b><b><strong>:</strong></b><span> With our expertise, avoid the pitfalls of applicant tracking systems and get your resume seen by recruiters.</span></li>
            <li><b><strong>AI-Powered Resume</strong></b><b><strong> Enhancements:</strong></b><span> Leverage advanced technology that positions you at the forefront of the hiring manager's mind.</span></li>
          </ul>
          <h2><span>Our </span><span>Online CV Service</span></h2>
          <p><span>Experience the ease and effectiveness of our </span><b><strong>online CV service</strong></b><span>. Generate polished, professional profiles with our intuitive </span><b><strong>resume builder</strong></b><span> and </span><b><strong>CV enhancer</strong></b><span> that amplify your job prospects effortlessly.</span></p>
          <h2><span>Get Started Today for Only $1</span></h2>
          <p><span>Take advantage of our unbeatable offer to </span><b><strong>optimize your CV</strong></b><span> for only $1. Witness the immediate impact of our </span><b><strong>AI-powered resume</strong></b><span> enhancements. </b><span> to transform your job application success rate.</span></p><br>
          <p><span>Ready to elevate your job application? </span><b><strong>Try our AI CV optimizer</strong></b><span> today and experience the difference!</span></p>
          <br><span>Works best on Chrome.</span></p>
        
          <!-- Legal links -->
          <div class="legal-links" style="margin-top: 30px; text-align: center; border-top: 1px solid rgba(0, 0, 0, 0.1); padding-top: 15px;">
            <p>
              <a href="terms-of-use.html" target="_blank" rel="noopener noreferrer" style="color: #4f46e5; margin-right: 20px;">Terms of Use</a>
              <a href="privacy-policy.html" target="_blank" rel="noopener noreferrer" style="color: #4f46e5;">Privacy Policy</a>
            </p>
          </div>
        </div>
      </div>
    </div>

    <!-- SCRIPTS SECTION -->
    <!-- Network resilience should be loaded early -->
    <script nonce="<%= nonce %>" src="/network-resilience.js"></script>
    <script nonce="<%= nonce %>" src="/debug-utility.js"></script>
    <script nonce="<%= nonce %>">
      // Debug mode is disabled by default
      if (window.appDebug) {
        window.appDebug.enabled = false;
      }
      
      // Debug mode key shortcut
      document.addEventListener('keydown', function(e) {
        if (e.ctrlKey && e.shiftKey && e.key === 'P') {
          if (window.appDebug) {
            window.appDebug.enabled = !window.appDebug.enabled;
            const status = window.appDebug.enabled ? 'enabled' : 'disabled';
            console.log(`Debug mode ${status}`);
            
            // Show notification
            if (typeof showNotification === 'function') {
              showNotification(`Debug mode ${status}`, status === 'enabled' ? 'info' : 'success');
            }
          }
        }
      });
    </script>

    <!-- Load LemonSqueezy SDK with error handling -->
    <script nonce="<%= nonce %>" src="https://app.lemonsqueezy.com/js/lemon.js" defer></script>

    <!-- Add a fallback in case the main lemon.js fails to load -->
    <script nonce="<%= nonce %>">
      // Check if Lemon Squeezy script fails to load
      window.addEventListener('error', function(event) {
        const target = event.target || {};
        if (target.tagName === 'SCRIPT' && target.src && target.src.includes('lemon.js')) {
          console.log('Lemon Squeezy script failed to load, using fallback');
          
          // Create a minimal fake LemonSqueezy object
          window.LemonSqueezy = window.LemonSqueezy || {
            Setup: function(options) {
              console.log('Using fallback LemonSqueezy.Setup');
              window.LemonSqueezyOptions = options;
              return true;
            },
            Url: {
              Close: function() { },
              createIframe: function() {
                const iframe = document.createElement('iframe');
                iframe.style.width = '100%';
                iframe.style.height = '100%';
                iframe.style.border = 'none';
                return iframe;
              }
            }
          };
          
          window.createLemonSqueezy = function() {
            console.log('Using fallback createLemonSqueezy');
            return true;
          };
        }
      }, true);
    </script>

    <!-- Lemon Squeezy event handler -->
    <script nonce="<%= nonce %>">
      window.addEventListener('message', function(event) {
        // Handle string-based events (our custom events)
        if (typeof event.data === 'string') {
          if (event.data === 'checkout-completed' || event.data.includes('success')) {
            console.log('✅ PAYMENT SUCCESS detected via message event');
            // Set global flag
            window.paymentCompleted = true;
            document.getElementById('result-message').innerHTML = '✅ Payment successful! Processing your request...';
            
            // Close the modal after a short delay
            setTimeout(() => {
              hideCheckoutModal(); // Call it here when payment succeeds
              
              // Start monitoring for results
              setTimeout(() => {
                if (currentJobId || localStorage.getItem('currentJobId')) {
                  window.checkoutCompleted = false;
                  const jobId = currentJobId || sessionStorage.getItem('currentJobId') || localStorage.getItem('currentJobId');
                  if (typeof pollRefinementStatus === 'function') {
                    pollRefinementStatus(jobId);
                  } else if (typeof window.monitorForResults === 'function') {
                    window.monitorForResults();
                  } else {
                    window.startRefinement(); // Fallback to direct refinement
                  }
                }
              }, 300);
            }, 700);
          } else if (event.data === 'checkout-closed') {
            console.log("❌ Checkout was closed without payment");
            // Only update message if payment wasn't completed
            if (!window.paymentCompleted) {
              document.getElementById('result-message').innerHTML = 
                '❌ Checkout cancelled. Click the button to try again.';
            }
          }
        }
        
        // Handle object-based events (Lemon Squeezy events)
        if (event.data && typeof event.data === 'object') {
          if (event.data.type === 'checkout:success' || 
              (event.data.event && event.data.event === 'checkout:success')) {
            console.log('✅ PAYMENT SUCCESS detected via Lemon Squeezy object event');
            window.paymentCompleted = true;
            document.getElementById('result-message').innerHTML = 
              '✅ Payment successful! Processing your request...';
            
            setTimeout(() => {
              hideCheckoutModal();
              
              setTimeout(() => {
                const jobId = currentJobId || localStorage.getItem('currentJobId');
                if (jobId) {
                  window.checkoutCompleted = false;
                  if (typeof pollRefinementStatus === 'function') {
                    pollRefinementStatus(jobId);
                  } else if (typeof window.monitorForResults === 'function') {
                    window.monitorForResults();
                  } else {
                    window.startRefinement();
                  }
                }
              }, 300);
            }, 700);
          }
        }
      }, false);
    </script>

    <!-- Scripts for functionality -->
    <script src="/checkout.js" defer></script>
    <script src="/app-scripts.js" defer></script>

    <!-- CORE FUNCTIONALITY SCRIPTS -->
    <script nonce="<%= nonce %>">
      // Global conversation array for multi-turn conversation (initialized on page load)
      let conversation = [
        { role: "user", content: "Hello, I'd like to refine my CV. Are you ready?" }
      ];

      // Helper function to display status messages
      function showStatus(message, type = "") {
        const status = document.getElementById("status");
        status.textContent = message;
        status.className = `show ${type}`;
        if (status.timeoutId) {
          clearTimeout(status.timeoutId);
        }
        status.timeoutId = setTimeout(() => {
          status.className = "";
        }, 3000);
      }

      // Add the notification function
      function showNotification(message, type = 'success') {
        const notification = document.getElementById('notification');
        if (!notification) return;
        
        notification.textContent = message;
        notification.style.display = 'block';
        notification.style.backgroundColor = type === 'success' ? '#10b981' : '#ef4444';
        
        // Add animation classes
        notification.style.animation = 'fadeIn 0.3s, slideDown 0.3s, fadeOut 0.3s 3.7s forwards';
        
        // Hide after animation completes
        setTimeout(() => {
          notification.style.display = 'none';
          notification.style.animation = '';
        }, 4000);
      }

      // Helper function to display result messages
      function resultMessage(msg) {
        document.getElementById("result-message").innerHTML = msg;
      }

      // Helper function to strip all HTML tags from a string
      function stripHTML(html) {
        return html.replace(/<[^>]*>/g, '');
      }

      // Update slider display as the user moves the slider
      const refineStrengthSlider = document.getElementById("refineStrength");
      const refineStrengthVal = document.getElementById("refineStrengthVal");
      refineStrengthSlider.addEventListener("input", () => {
        refineStrengthVal.textContent = refineStrengthSlider.value;
      });

      // Normalize and clean CV HTML content
      function normalizeCV(html) {
        if (!html) return '';
        
        return html
          // Remove markdown code block markers more thoroughly
          .replace(/^```[a-zA-Z]*\s*\n?/i, '')  // Start marker with optional language
          .replace(/```\s*$/i, '')              // End marker
          .replace(/\n{3,}/g, '\n\n')           // Other normalizations
          .replace(/<p>\s*<\/p>/gi, '')
          .replace(/<li>\s+/gi, '<li>')
          .replace(/\s+<\/li>/gi, '</li>')
          .replace(/<\/li>\s*(<br\s*\/?>\s*)+<li>/gi, '</li><li>')
          .replace(/<ul>\s*(<br\s*\/?>\s*)+/gi, '<ul>')
          .replace(/(<br\s*\/?>\s*)+<\/ul>/gi, '</ul>')
          .replace(/\s{2,}/g, ' ')
          .replace(/(<div[^>]*>)\s*(<br\s*\/?>\s*)+/gi, '$1')
          .replace(/(<br\s*\/?>\s*)+(<\/div>)/gi, '$2')
          .replace(/(<\/div>)\s*(<div)/gi, '$1\n$2')
          .trim();
      }

      // Setup Frame function to have light container
      function setupFrame(frame, placeholder) {
        const doc = frame.contentDocument;
        if (!doc) return;
        
        // Enable editing for input frame
        if (frame.id === "cvInputFrame") {
          doc.designMode = 'on';
          console.log("Edit mode enabled for frame:", placeholder);
          
          // Light theme styling for input frame
          const styleTag = document.createElement('style');
          styleTag.textContent = `
            html, body {
              margin: 10px;
              padding: 0;
              font-family: 'Poppins', Arial, sans-serif;
              color: #1e293b;
              background-color: white;
              line-height: 1.5;
            }
            .placeholder {
              opacity: 0.6;
              color: #94a3b8;
              user-select: none;
              font-style: italic;
            }
            p, div {
              margin: 0;
              padding: 0;
            }
            ul, ol {
              margin: 0;
              padding-left: 20px;
            }
            li {
              margin: 0;
              padding: 0;
            }
          `;
          doc.head.appendChild(styleTag);
        } else {
          // For output frame - light background with clean content
          const styleTag = document.createElement('style');
          styleTag.textContent = `
            html, body {
              margin: 10px;
              padding: 0;
              font-family: 'Poppins', Arial, sans-serif;
              background-color: white;
              color: #1e293b;
              line-height: 1.5;
            }
            
            .placeholder {
              opacity: 0.6;
              color: #94a3b8;
              user-select: none;
              font-style: italic;
            }
            
            p, div, span, h1, h2, h3, h4, h5, h6, 
            ul, ol, li, table, tr, td, th {
              color: #1e293b;
            }
            
            ul, ol {
              margin: 0;
              padding-left: 20px;
            }
            
            li {
              margin: 0;
              padding: 0;
            }
          `;
          doc.head.appendChild(styleTag);
        }
        
        // Set placeholder text
        doc.body.innerHTML = `<p class="placeholder">${placeholder}</p>`;
      }

      // Update function for output frame
      function updateOutputFrame(htmlContent) {
        const outDoc = document.getElementById('cvOutputFrame').contentDocument;
        if (!outDoc) return;
        
        // First, make sure we have clean styling
        let styleExists = false;
        const styles = outDoc.head.getElementsByTagName('style');
        for (let i = 0; i < styles.length; i++) {
          if (styles[i].getAttribute('data-clean-style') === 'true') {
            styleExists = true;
            break;
          }
        }
        
        if (!styleExists) {
          const styleTag = document.createElement('style');
          styleTag.setAttribute('data-clean-style', 'true');
          styleTag.textContent = `
            html, body {
              margin: 10px;
              padding: 0;
              font-family: 'Poppins', Arial, sans-serif;
              background-color: white;
              color: #1e293b;
              line-height: 1.5;
            }
            
            p, div, span, h1, h2, h3, h4, h5, h6, 
            ul, ol, li, table, tr, td, th {
              color: inherit;
            }
          `;
          outDoc.head.appendChild(styleTag);
        }
        
        // Set the content
        outDoc.body.innerHTML = htmlContent;
      }

      // Make updateOutputFrame globally available
      window.updateOutputFrame = updateOutputFrame;

      // iframe initialization code
      const inputFrame = document.getElementById("cvInputFrame");
      inputFrame.srcdoc = "<html><body></body></html>";
      inputFrame.onload = () => {
        // Prioritize session-specific CV content
        const savedCV = sessionStorage.getItem('savedCVContent') || localStorage.getItem('savedCVContent');
        // If content was in localStorage, migrate it to sessionStorage for this session
        if (!sessionStorage.getItem('savedCVContent') && localStorage.getItem('savedCVContent')) {
          sessionStorage.setItem('savedCVContent', localStorage.getItem('savedCVContent'));
        }

        if (savedCV) {
          const doc = inputFrame.contentDocument;
          if (doc) {
            // Set up styles first
            const styleTag = document.createElement('style');
            styleTag.textContent = `
              html, body {
                margin: 10px;
                padding: 0;
                font-family: 'Poppins', Arial, sans-serif;
                color: #1e293b;
                background-color: white;
                line-height: 1.5;
              }
              * {
                color: #1e293b;
              }
              .placeholder {
                opacity: 0.6;
                color: #94a3b8;
                user-select: none;
                font-style: italic;
              }
              p, div {
                margin: 0;
                padding: 0;
              }
              ul, ol {
                margin: 0;
                padding-left: 20px;
              }
              li {
                margin: 0;
                padding: 0;
              }
            `;
            doc.head.appendChild(styleTag);
            
            // Enable editing
            doc.designMode = 'on';
            
            // Set content to saved CV
            doc.body.innerHTML = savedCV;
            console.log("Input frame loaded with saved CV content");
            
            // Setup event listeners
            doc.body.addEventListener('input', function() {
              sessionStorage.setItem('savedCVContent', doc.body.innerHTML);
            });
            
            doc.body.addEventListener('blur', function() {
              if (doc.body.innerHTML.trim() === '' || doc.body.innerHTML === '<br>') {
                doc.body.innerHTML = '<p class="placeholder">PASTE YOUR CV HERE</p>';
              } else {
                sessionStorage.setItem('savedCVContent', doc.body.innerHTML);
              }
            });
          }
        } else {
          // No saved content, use the existing setup
          setupFrame(inputFrame, "PASTE YOUR CV HERE");
          
          const doc = inputFrame.contentDocument;
          if (doc) {
            // Make sure designMode is enabled directly
            doc.designMode = 'on';
            console.log("Input frame loaded, designMode:", doc.designMode);
            
            // Add click handler to clear placeholder
            doc.body.addEventListener('click', function() {
              if (doc.body.innerHTML.includes('class="placeholder"')) {
                doc.body.innerHTML = '';
              }
            });
            
            // Add focus handler as backup for click
            doc.body.addEventListener('focus', function() {
              if (doc.body.innerHTML.includes('class="placeholder"')) {
                doc.body.innerHTML = '';
              }
            });
            
            // Restore placeholder if empty on blur and save content otherwise
            doc.body.addEventListener('blur', function() {
              if (doc.body.innerHTML.trim() === '' || doc.body.innerHTML === '<br>') {
                doc.body.innerHTML = '<p class="placeholder">PASTE YOUR CV HERE</p>';
              } else {
                localStorage.setItem('savedCVContent', doc.body.innerHTML);
              }
            });
            
            // Save content on input
            doc.body.addEventListener('input', function() {
            if (!doc.body.innerHTML.includes('class="placeholder"')) {
              sessionStorage.setItem('savedCVContent', doc.body.innerHTML);
            }
          });
          }
        }
      };

      // Replace the outputFrame initialization code as well
      const outputFrame = document.getElementById("cvOutputFrame");
      outputFrame.srcdoc = "<html><body></body></html>";
      outputFrame.onload = () => {
        setupFrame(outputFrame, "REFINED CV WILL APPEAR HERE (typically within 2-3 minutes).<br>You will see the changes made in your CV in the Changes section below");
      };

      // Spinner functions
      function showSpinner() {
        document.getElementById("spinner").style.display = "block";
      }
      function hideSpinner() {
        document.getElementById("spinner").style.display = "none";
      }

      // Setup step cards
      document.addEventListener('DOMContentLoaded', function() {
        // Initial active step
        setActiveStep(1);
        
        // Set active step when elements are interacted with
        document.getElementById('jobUrlInput').addEventListener('focus', function() {
          setActiveStep(1);
        });
        
        const inputFrame = document.getElementById('cvInputFrame');
        if (inputFrame) {
          inputFrame.addEventListener('load', function() {
            const doc = inputFrame.contentDocument;
            if (doc) {
              doc.body.addEventListener('click', function() {
                setActiveStep(2);
              });
            }
          });
        }
        
        // Upload CV button
        const uploadBtn = document.getElementById('upload-cv-btn');
        if (uploadBtn) {
          uploadBtn.addEventListener('click', function() {
            setActiveStep(2);
            // Create a file input element
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = '.pdf,.doc,.docx,.txt,.html';
            
            // Trigger click on the file input
            fileInput.click();
            
            // Handle file selection
            fileInput.addEventListener('change', function(e) {
              if (e.target.files.length > 0) {
                const file = e.target.files[0];
                // Read the file content
                const reader = new FileReader();
                reader.onload = function(e) {
                  const contents = e.target.result;
                  const doc = inputFrame.contentDocument;
                  if (doc) {
                    doc.body.innerHTML = contents;
                    // Save to localStorage
                    if (typeof localStorage !== 'undefined') {
                      localStorage.setItem('savedCVContent', contents);
                    }
                  }
                };
                reader.readAsText(file);
              }
            });
          });
        }
        
        // Paste CV button
        const pasteBtn = document.getElementById('paste-cv-btn');
        if (pasteBtn) {
          pasteBtn.addEventListener('click', function() {
            setActiveStep(2);
            // Focus in the input frame to make pasting easier
            const inputFrame = document.getElementById('cvInputFrame');
            if (inputFrame && inputFrame.contentDocument) {
              inputFrame.contentDocument.body.focus();
              // Try to use clipboard API if available
              navigator.clipboard.readText().then(text => {
                if (text) {
                  inputFrame.contentDocument.body.innerHTML = text;
                  // Save to localStorage
                  if (typeof localStorage !== 'undefined') {
                    localStorage.setItem('savedCVContent', text);
                  }
                }
              }).catch(err => {
                alert('Click in the frame and press Ctrl+V to paste your CV');
              });
            }
          });
        }
        
        // Copy CV button
        const copyBtn = document.getElementById('copy-cv-btn');
        if (copyBtn) {
          copyBtn.addEventListener('click', function() {
            const outputFrame = document.getElementById('cvOutputFrame');
            if (outputFrame && outputFrame.contentDocument) {
              const content = outputFrame.contentDocument.body.innerHTML;
              navigator.clipboard.writeText(content).then(() => {
                showNotification('CV copied to clipboard!', 'success');
              }).catch(err => {
                showNotification('Failed to copy. Please try again.', 'error');
              });
            }
          });
        }
        
          // Download CV button that creates a proper HTML file for Word without tab markers
          const downloadBtn = document.getElementById('download-cv-btn');
          if (downloadBtn) {
            downloadBtn.addEventListener('click', function() {
              const outputFrame = document.getElementById('cvOutputFrame');
              if (outputFrame && outputFrame.contentDocument) {
                try {
                  const content = outputFrame.contentDocument.body.innerHTML;
                  
                  // Create clean HTML with better Word-specific styling
                  const cleanHTML = `<!DOCTYPE html>
                    <html xmlns:o="urn:schemas-microsoft-com:office:office" 
                          xmlns:w="urn:schemas-microsoft-com:office:word"
                          xmlns:m="http://schemas.microsoft.com/office/2004/12/omml"
                          xmlns:v="urn:schemas-microsoft-com:vml"
                          xmlns="http://www.w3.org/TR/REC-html40">
                    <head>
                    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                    <meta name="ProgId" content="Word.Document">
                    <meta name="Generator" content="Microsoft Word 15">
                    <meta name="Originator" content="Microsoft Word 15">
                    <title>Optimized CV</title>
                    <!--[if gte mso 9]>
                    <xml>
                    <w:WordDocument>
                    <w:View>Print</w:View>
                    <w:Zoom>100</w:Zoom>
                    <w:DoNotOptimizeForBrowser/>
                    </w:WordDocument>
                    </xml>
                    <![endif]-->
                    <style>
                    /* Word-specific styling to control formatting */
                    @page {
                        size: 8.5in 11in;
                        margin: 1in;
                    }
                    body {
                        font-family: 'Calibri', sans-serif;
                        font-size: 11pt;
                        line-height: 1.3;
                        margin: 0;
                        padding: 0;
                        width: 100%;
                        max-width: 100%;
                    }
                    div, p, h1, h2, h3, h4, ul, ol, li {
                        margin: 0;
                        padding: 0;
                        page-break-inside: avoid;
                        width: 100%;
                        max-width: 100%;
                    }
                    ul, ol {
                        margin-left: 0;
                        padding-left: 20pt;
                    }
                    li {
                        margin-left: 0;
                        padding-left: 0;
                    }
                    h1, h2, h3, h4 {
                        font-weight: bold;
                        page-break-after: avoid;
                    }
                    h1 {
                        font-size: 16pt;
                        margin-top: 12pt;
                        margin-bottom: 6pt;
                    }
                    h2 {
                        font-size: 14pt;
                        margin-top: 10pt;
                        margin-bottom: 6pt;
                    }
                    h3 {
                        font-size: 12pt;
                        margin-top: 8pt;
                        margin-bottom: 4pt;
                    }
                    </style>
                    </head>
                    <body>
                    ${content}
                    </body>
                    </html>`;
                  
                  // Create a blob with the HTML
                  const blob = new Blob([cleanHTML], { type: 'application/msword' });
                  const url = URL.createObjectURL(blob);
                  
                  // Create a download link and trigger click
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = 'optimized-cv.doc';
                  document.body.appendChild(a);
                  a.click();
                  document.body.removeChild(a);
                  URL.revokeObjectURL(url);
                  
                  showNotification('CV downloaded for Word! Save as .docx after opening.', 'success');
                } catch (err) {
                  console.error('Error creating Word document:', err);
                  showNotification('Failed to download. Please try again.', 'error');
                }
              }
            });
          }

        // Open in New Tab button
        const openTabBtn = document.getElementById('open-tab-cv-btn');
        if (openTabBtn) {
          openTabBtn.addEventListener('click', function() {
            const outputFrame = document.getElementById('cvOutputFrame');
            if (outputFrame && outputFrame.contentDocument) {
              try {
                const content = outputFrame.contentDocument.body.innerHTML;
                
                // Create a complete HTML document
                const fullHTML = `
                  <!DOCTYPE html>
                  <html>
                  <head>
                    <meta charset="utf-8">
                    <title>Optimized CV</title>
                    <style>
                      body { font-family: 'Arial', sans-serif; margin: 20px; line-height: 1.5; color: #333; }
                      p { margin-bottom: 10px; }
                      ul, ol { margin-top: 5px; margin-bottom: 10px; }
                      h1, h2, h3, h4 { margin-top: 20px; margin-bottom: 10px; }
                    </style>
                  </head>
                  <body>${content}</body>
                  </html>
                `;
                
                // Open in new tab
                const newTab = window.open();
                newTab.document.open();
                newTab.document.write(fullHTML);
                newTab.document.close();
                
                showNotification('CV opened in new tab!', 'success');
              } catch (err) {
                console.error('Error opening in new tab:', err);
                showNotification('Failed to open in new tab. Please try again.', 'error');
              }
            }
          });
        }
        
        // Check Results button setup
        const checkResultsBtn = document.getElementById('check-results-button');
        if (checkResultsBtn) {
          checkResultsBtn.addEventListener('click', function() {
            checkRefinementStatus().then(resultFound => {
              if (!resultFound) {
                showNotification('Still processing your CV. Please wait a moment.', 'info');
              }
            });
          });
          
          // Style the button
          checkResultsBtn.className = 'action-button';
          checkResultsBtn.style.background = 'linear-gradient(to right, var(--primary), var(--secondary))';
          checkResultsBtn.style.color = 'white';
          checkResultsBtn.style.border = 'none';
          checkResultsBtn.style.padding = '0.5rem 1rem';
          checkResultsBtn.style.borderRadius = 'calc(var(--radius) / 2)';
          checkResultsBtn.style.fontWeight = 'bold';
        }
        
        // Make the button visible after checkout starts
        window.showCheckResultsButton = function() {
          if (checkResultsBtn) {
            checkResultsBtn.style.display = 'block';
          }
        };
      });

      // Function to set the active step
      function setActiveStep(stepNum) {
        // Remove active class from all steps
        const stepCards = document.querySelectorAll('.step-card');
        stepCards.forEach(card => card.classList.remove('active'));
        
        // Add active class to the current step
        if (stepCards.length >= stepNum) {
          stepCards[stepNum - 1].classList.add('active');
        }
      }

      // MAIN REFINEMENT FUNCTION
      window.startRefinement = function() {
        showSpinner();
        showStatus("Optimizing your CV... please wait.");
        
        const jobUrl = document.getElementById("jobUrlInput").value.trim();
        const inputDoc = inputFrame.contentDocument;
        
        if (!inputDoc) {
          showStatus("Error: Could not access the CV input frame.", "error");
          hideSpinner();
          return;
        }
        
        // Normalize input CV before sending
        let cvHTML = normalizeCV(inputDoc.body.innerHTML);
        
        if (!jobUrl || !cvHTML) {
          showStatus("Error: Please provide both a job URL and your CV HTML.", "error");
          hideSpinner();
          return;
        }
        
        const refinementLevel = document.getElementById("refineStrength").value;

        // Add this logging for debugging
        console.log(`Using refinement level: ${refinementLevel}`);

        // Add the user's full message to the conversation
        conversation.push({
          role: "user",
          content: `
            Here is my CV in HTML:
            """${cvHTML}"""

            Job URL: ${jobUrl}

            Please refine this CV to be perfect for the job.
            Refinement Level: ${refinementLevel}

            IMPORTANT:
            - You already have my CV from previous messages—do NOT ask for it again.
            - **Preserve the original formatting exactly.** This includes:
              - All original headings (e.g., INTRO, EDUCATION, PROFESSIONAL EXPERIENCE).
              - The same bullet points, indentation, and spacing. Each bullet point must be directly attached to its corresponding text.
            - Do NOT add extra blank rows or additional spaces.
            - Return the FULL updated CV in HTML with no extra commentary.
            `
        });

        // Send to server for refinement
        fetch("/refine", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ conversation, jobUrl, cvHTML, refinementLevel }),
        })
        .then((response) => response.json())
        .then((data) => {
          hideSpinner();
          let refinedHTML = data.refinedHTML || "";
          
          // Normalize the refined CV
          refinedHTML = normalizeCV(refinedHTML);
          
          const outDoc = outputFrame.contentDocument;
          if (!outDoc) {
            showStatus("Error: Could not access the output frame.", "error");
            return;
          }
          
          // Update the output frame with normalized content
          updateOutputFrame(refinedHTML);
          
          // Handle changes display
          if (data.changes) {
            const changesContainer = document.getElementById("changes");
            changesContainer.innerHTML = data.changes;
            
            const legend = document.createElement('div');
            legend.style.marginTop = '1rem';
            legend.style.fontSize = '0.9rem';
            legend.innerHTML = `
              <span class="diff-added">Green text</span> = Added content<br>
              <span class="diff-removed">Red text</span> = Removed content
            `;
            changesContainer.appendChild(legend);
          } else {
            document.getElementById("changes").innerHTML = 
              "<h3>Changes Made</h3><p>No changes data available.</p>";
          }
          
          showStatus("CV refined successfully!", "success");
          setActiveStep(3);
        })
        .catch((err) => {
          console.error(err);
          showStatus("Error: " + err.message, "error");
          hideSpinner();
        });
      };

      // REFINEMENT STATUS POLLING FUNCTIONS
      // Create a new endpoint to check refinement status
      async function checkRefinementStatus() {
        try {
          const jobId = sessionStorage.getItem('currentJobId') || localStorage.getItem('currentJobId');
          
          if (!jobId) {
            console.log("No jobId found in localStorage, cannot check refinement status");
            return false; // Early return if no jobId
          }
          
          const response = await fetch('/api/refinement-status', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ jobId })
          });

          const data = await response.json();
          console.log("Refinement status check:", data);
          
          if (data.status === 'completed' && data.refinedHTML) {
            console.log("✅ Refinement results found!");
            
            // Update the output frame with the refined CV
            const outDoc = document.getElementById('cvOutputFrame').contentDocument;
            if (outDoc) {
              // Make sure we replace the entire body content
              updateOutputFrame(normalizeCV(data.refinedHTML));
              
              // Update the changes display
              if (data.changes) {
                const changesContainer = document.getElementById("changes");
                
                // Put the changes directly in the container
                changesContainer.innerHTML = data.changes;
                
                // Add the legend after the changes content
                const legend = document.createElement('div');
                legend.style.marginTop = '1rem';
                legend.style.fontSize = '0.9rem';
                legend.innerHTML = `
                  <span class="diff-added">Green text</span> = Added content<br>
                  <span class="diff-removed">Red text</span> = Removed content
                `;
                changesContainer.appendChild(legend);
              }
              
              // Show notification
              showNotification('✅ CV refinement complete! Check the results.');
              
              // Reset message and buttons
              document.getElementById('result-message').innerHTML = '';
              
              const checkoutButton = document.getElementById('checkout-button');
              if (checkoutButton) {
                checkoutButton.disabled = false;
                checkoutButton.textContent = 'Optimize Me!';
              }
              
              // Hide spinner
              hideSpinner();
              
              // Set active step to Step 3
              setActiveStep(3);
              
              return true;
            }
          }
          
          return false;
        } catch (err) {
          console.error("Error checking refinement status:", err);
          return false;
        }
      }
      
      // Replace the monitorForResults function with this improved version
      window.monitorForResults = function() {
        console.log("Starting result monitoring");
        
        // Reset the checkout completed flag to ensure we can monitor again
        window.checkoutCompleted = false;
        
        let attempts = 0;
        const maxAttempts = 30; // 30 attempts × 5 seconds = 2.5 minutes max wait
        
        // Show spinner when monitoring starts
        showSpinner();
        
        // Get the current jobId from localStorage - should be the newest one
        const jobId = sessionStorage.getItem('currentJobId') || localStorage.getItem('currentJobId');
        if (!jobId) {
          console.error("No jobId found in localStorage for monitoring");
          document.getElementById('result-message').innerHTML = 'Error: Could not find job ID for monitoring';
          hideSpinner();
          return;
        }
        
        console.log(`Starting monitoring for jobId: ${jobId}`);
        
        // Update message
        document.getElementById('result-message').innerHTML = '⚙️ CV optimization in progress...';
        
        const checkInterval = setInterval(async () => {
          attempts++;
          console.log(`Checking for results (attempt ${attempts}/${maxAttempts})...`);
          
          try {
            // Add timestamp to prevent caching
            const timestamp = new Date().getTime();
            const response = await fetch(`/api/refinement-status?t=${timestamp}`, {
              method: 'POST',
              headers: { 
                'Content-Type': 'application/json',
                'Cache-Control': 'no-cache, no-store, must-revalidate',
                'Pragma': 'no-cache'
              },
              body: JSON.stringify({ jobId })
            });
            
            if (!response.ok) {
              throw new Error(`Failed to check refinement status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log("Result check response:", data);
            
            if (data.status === 'completed' && data.refinedHTML) {
              console.log("✅ Results found, stopping interval");
              clearInterval(checkInterval);
              
              // Update the output frame with the refined CV
              const outDoc = document.getElementById('cvOutputFrame').contentDocument;
              if (outDoc) {
                // Normalize and display
                const normalizedHTML = typeof normalizeCV === 'function' ? 
                  normalizeCV(data.refinedHTML) : data.refinedHTML;
                updateOutputFrame(normalizedHTML);
                
                // Update the changes display
                if (data.changes) {
                  const changesContainer = document.getElementById("changes");
                  
                  // Put the changes directly in the container
                  changesContainer.innerHTML = data.changes;
                  
                  // Add the legend after the changes content
                  const legend = document.createElement('div');
                  legend.style.marginTop = '1rem';
                  legend.style.fontSize = '0.9rem';
                  legend.innerHTML = `
                    <span class="diff-added">Green text</span> = Added content<br>
                    <span class="diff-removed">Red text</span> = Removed content
                  `;
                  changesContainer.appendChild(legend);
                }
                
                // Show completion message
                document.getElementById('result-message').innerHTML = '✅ CV refinement complete!';
                
                // Show notification
                if (typeof showNotification === 'function') {
                  showNotification('✅ CV refinement complete! Check the results.');
                }
                
                // Enable checkout button for next optimization
                const checkoutButton = document.getElementById('checkout-button');
                if (checkoutButton) {
                  checkoutButton.disabled = false;
                  checkoutButton.textContent = 'Optimize Me!';
                }
                
                // Set active step to Step 3
                setActiveStep(3);
                
                // Hide spinner
                hideSpinner();
              }
            } else if (attempts >= maxAttempts) {
              console.log("❌ Max attempts reached, stopping interval");
              clearInterval(checkInterval);
              document.getElementById('result-message').innerHTML = 
                'No results found. Please try again with a different job URL.';
              hideSpinner();
            }
          } catch (error) {
            console.error("Error in monitoring:", error);
            if (attempts >= maxAttempts) {
              clearInterval(checkInterval);
              hideSpinner();
            }
          }
        }, 5000); // Check every 5 seconds
        
        return checkInterval; // Return interval ID for potential cleanup
      };
        
      // Start monitoring on page load if the message suggests a checkout was started
      document.addEventListener('DOMContentLoaded', function() {
        const messageEl = document.getElementById('result-message');
        if (messageEl && 
           (messageEl.textContent.includes('checkout') || 
            messageEl.textContent.includes('Preparing') || 
            messageEl.textContent.includes('Opening'))) {
          console.log("Page loaded with checkout in progress, starting monitoring");
          monitorForResults();
        }
        
        // Also watch for changes to the message element
        const observer = new MutationObserver((mutations) => {
          mutations.forEach((mutation) => {
            if (mutation.type === 'childList' && 
                messageEl.textContent.includes('Opening checkout')) {
              if (!window.checkoutCompleted) {  // Use window.checkoutCompleted
                window.checkoutCompleted = true;  // Use window.checkoutCompleted
                console.log("Checkout opened, starting result monitoring");
                monitorForResults();
              }
            }
          });
        });
        
        if (messageEl) {
          observer.observe(messageEl, { childList: true });
        }
        
        // Backup: check once on page load regardless of conditions
        setTimeout(() => {
          checkRefinementStatus()
            .then(resultFound => {
              if (resultFound) {
                console.log("✅ Results found on initial check");
              } else {
                console.log("No results found on initial check");
              }
            })
            .catch(err => console.error("Error in initial check:", err));
        }, 2000);
      });
    </script>

    <!-- Safari Detection Script -->
    <script nonce="<%= nonce %>">
      // Ensure Safari uses popup window for checkout
      document.addEventListener('DOMContentLoaded', function() {
        // Check if this is Safari
        const ua = navigator.userAgent.toLowerCase();
        const isSafari = ua.indexOf('safari') > -1 && ua.indexOf('chrome') === -1;
        
        if (isSafari) {
          console.log("Safari detected - setting up popup checkout");
          
          // Add class to force popup
          document.body.classList.add('force-safari-popup');
          
          // Force the global flag
          window.forceSafariPopup = true;
          
          // Add a notice about popup window
          const messageEl = document.getElementById('result-message');
          
          // Make sure Modal is completely disabled
          const checkoutModal = document.getElementById('checkout-modal');
          if (checkoutModal) {
            checkoutModal.style.display = 'none';
          }
        }
      });
      
      // Additional function to handle popup windows
      window.openPopupCheckout = function(url) {
        console.log("Opening popup checkout window");
        
        try {
          // Calculate center position
          const width = Math.min(800, window.innerWidth - 40);
          const height = Math.min(700, window.innerHeight - 40);
          const left = (window.innerWidth - width) / 2 + window.screenX;
          const top = (window.innerHeight - height) / 2 + window.screenY;
          
          // Close any existing popup
          if (window.paymentPopupWindow && !window.paymentPopupWindow.closed) {
            window.paymentPopupWindow.close();
          }
          
          // Open popup
          const popupWindow = window.open(
            url,
            'checkoutWindow',
            `width=${width},height=${height},left=${left},top=${top},resizable=yes,scrollbars=yes,status=yes`
          );
          
          // Return the window reference (important!)
          return popupWindow;
        } catch (error) {
          console.log("Error in openPopupCheckout:", error);
          return null;
        }
      };
    </script>
    
    <!--
    * ABOUT PANEL FUNCTIONALITY
    * Handles opening and closing the About panel
    -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const aboutButton = document.getElementById('about-button');
        const aboutOverlay = document.getElementById('about-overlay');
        const closeAboutButton = document.getElementById('close-about');
        const bodyEl = document.body;
        
        // Store original body overflow
        let originalBodyOverflow;
        
        // Function to open about panel
        function openAboutPanel() {
          // Store original overflow
          originalBodyOverflow = bodyEl.style.overflow;
          
          // Disable body scrolling
          bodyEl.style.overflow = 'hidden';
          
          // Open overlay
          aboutOverlay.classList.add('open');
          
          // Set focus to panel for accessibility
          setTimeout(() => {
            const aboutPanel = document.getElementById('about-panel');
            if (aboutPanel) aboutPanel.focus();
          }, 100);
        }
        
        // Function to close about panel
        function closeAboutPanel() {
          // Close overlay
          aboutOverlay.classList.remove('open');
          
          // Restore original body overflow after animation completes
          setTimeout(() => {
            bodyEl.style.overflow = originalBodyOverflow || '';
          }, 400); // Match the overlay's transition time
        }
        
        // Event listeners for about panel
        if (aboutButton) {
          aboutButton.addEventListener('click', openAboutPanel);
        }
        
        if (closeAboutButton) {
          closeAboutButton.addEventListener('click', closeAboutPanel);
        }
        
        // Close panel when clicking on the overlay (outside the panel)
        if (aboutOverlay) {
          aboutOverlay.addEventListener('click', function(event) {
            // Close only if clicking the overlay itself, not the panel content
            if (event.target === aboutOverlay) {
              closeAboutPanel();
            }
          });
        }
        
        // Prevent clicks inside the panel from closing it
        const aboutPanel = document.getElementById('about-panel');
        if (aboutPanel) {
          aboutPanel.addEventListener('click', function(event) {
            event.stopPropagation();
          });
        }
        
        // Add keyboard accessibility - close on Escape
        document.addEventListener('keydown', function(e) {
          if (e.key === 'Escape' && aboutOverlay.classList.contains('open')) {
            closeAboutPanel();
          }
        });
      });
    </script>

    <script> 
      /* Add this code after the previous JavaScript for About panel */
      // Add Safari-specific class when about panel is open
      function handleSafariOverflow() {
        const ua = navigator.userAgent.toLowerCase();
        const isSafari = ua.indexOf('safari') > -1 && ua.indexOf('chrome') === -1;
        
        if (isSafari) {
          // Add additional Safari handling
          const aboutButton = document.getElementById('about-button');
          const closeAboutButton = document.getElementById('close-about');
          
          if (aboutButton) {
            aboutButton.addEventListener('click', function() {
              document.body.classList.add('about-open');
            });
          }
          
          if (closeAboutButton) {
            closeAboutButton.addEventListener('click', function() {
              setTimeout(function() {
                document.body.classList.remove('about-open');
              }, 400);
            });
          }
          
          // Also handle overlay background clicks
          const aboutOverlay = document.getElementById('about-overlay');
          if (aboutOverlay) {
            aboutOverlay.addEventListener('click', function(event) {
              if (event.target === aboutOverlay) {
                setTimeout(function() {
                  document.body.classList.remove('about-open');
                }, 400);
              }
            });
          }
        }
      }

      // Call this function on page load
      document.addEventListener('DOMContentLoaded', handleSafariOverflow);
    </script>

    <script type="text/javascript">
      _linkedin_partner_id = "7156762";
      window._linkedin_data_partner_ids = window._linkedin_data_partner_ids || [];
      window._linkedin_data_partner_ids.push(_linkedin_partner_id);
    </script>
    <script type="text/javascript">
      (function(l) {
      if (!l){window.lintrk = function(a,b){window.lintrk.q.push([a,b])};
      window.lintrk.q=[]}
      var s = document.getElementsByTagName("script")[0];
      var b = document.createElement("script");
      b.type = "text/javascript";b.async = true;
      b.src = "https://snap.licdn.com/li.lms-analytics/insight.min.js";
      s.parentNode.insertBefore(b, s);})(window.lintrk);
    </script>
    <noscript>
      <img height="1" width="1" style="display:none;" alt="" src="https://px.ads.linkedin.com/collect/?pid=7156762fmt=gif" />
    </noscript>

  </body>
</html>